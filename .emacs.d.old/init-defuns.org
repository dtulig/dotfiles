
* General Defuns
 - I disliked the order that it used for where to put auto save
   buffers that do not map to a file. The new change will first try to
   write to /tmp before going to the default directory, typically
   where emacs was loaded for buffers without files.
   #+BEGIN_SRC emacs-lisp
     (defun make-auto-save-file-name ()
       "Return file name to use for auto-saves of current buffer.
     Does not consider `auto-save-visited-file-name' as that variable is checked
     before calling this function.  You can redefine this for customization.
     See also `auto-save-file-name-p'."
       (if buffer-file-name
           (let ((handler (find-file-name-handler buffer-file-name
                                                  'make-auto-save-file-name)))
             (if handler
                 (funcall handler 'make-auto-save-file-name)
               (let ((list auto-save-file-name-transforms)
                     (filename buffer-file-name)
                     result uniq)
                 ;; Apply user-specified translations
                 ;; to the file name.
                 (while (and list (not result))
                   (if (string-match (car (car list)) filename)
                       (setq result (replace-match (cadr (car list)) t nil
                                                   filename)
                             uniq (car (cddr (car list)))))
                   (setq list (cdr list)))
                 (if result
                     (if uniq
                         (setq filename (concat
                                         (file-name-directory result)
                                         (subst-char-in-string
                                          ?/ ?!
                                          (replace-regexp-in-string "!" "!!"
                                                                    filename))))
                       (setq filename result)))
                 (setq result
                       (if (and (eq system-type 'ms-dos)
                                (not (msdos-long-file-names)))
                           ;; We truncate the file name to DOS 8+3 limits
                           ;; before doing anything else, because the regexp
                           ;; passed to string-match below cannot handle
                           ;; extensions longer than 3 characters, multiple
                           ;; dots, and other atrocities.
                           (let ((fn (dos-8+3-filename
                                      (file-name-nondirectory buffer-file-name))))
                             (string-match
                              "\\`\\([^.]+\\)\\(\\.\\(..?\\)?.?\\|\\)\\'"
                              fn)
                             (concat (file-name-directory buffer-file-name)
                                     "#" (match-string 1 fn)
                                     "." (match-string 3 fn) "#"))
                         (concat (file-name-directory filename)
                                 "#"
                                 (file-name-nondirectory filename)
                                 "#")))
                 ;; Make sure auto-save file names don't contain characters
                 ;; invalid for the underlying filesystem.
                 (if (and (memq system-type '(ms-dos windows-nt cygwin))
                          ;; Don't modify remote (ange-ftp) filenames
                          (not (string-match "^/\\w+@[-A-Za-z0-9._]+:" result)))
                     (convert-standard-filename result)
                   result))))

         ;; Deal with buffers that don't have any associated files.  (Mail
         ;; mode tends to create a good number of these.)

         (let ((buffer-name (buffer-name))
               (limit 0)
               file-name)
           ;; Restrict the characters used in the file name to those which
           ;; are known to be safe on all filesystems, url-encoding the
           ;; rest.
           ;; We do this on all platforms, because even if we are not
           ;; running on DOS/Windows, the current directory may be on a
           ;; mounted VFAT filesystem, such as a USB memory stick.
           (while (string-match "[^A-Za-z0-9-_.~#+]" buffer-name limit)
             (let* ((character (aref buffer-name (match-beginning 0)))
                    (replacement
                     ;; For multibyte characters, this will produce more than
                     ;; 2 hex digits, so is not true URL encoding.
                     (format "%%%02X" character)))
               (setq buffer-name (replace-match replacement t t buffer-name))
               (setq limit (1+ (match-end 0)))))
           ;; Generate the file name.
           (setq file-name
                 (make-temp-file
                  (let ((fname
                         (expand-file-name
                          (format "#%s#" buffer-name)
                          ;; Try a few alternative directories, to get one we can
                          ;; write it.
                          (cond
                           ((file-writable-p "/tmp/") "/tmp/")
                           ((file-writable-p default-directory) default-directory)
                           ((file-writable-p "/var/tmp/") "/var/tmp/")
                           ("~/")))))
                    (if (and (memq system-type '(ms-dos windows-nt cygwin))
                             ;; Don't modify remote (ange-ftp) filenames
                             (not (string-match "^/\\w+@[-A-Za-z0-9._]+:" fname)))
                        ;; The call to convert-standard-filename is in case
                        ;; buffer-name includes characters not allowed by the
                        ;; DOS/Windows filesystems.  make-temp-file writes to the
                        ;; file it creates, so we must fix the file name _before_
                        ;; make-temp-file is called.
                        (convert-standard-filename fname)
                      fname))
                  nil "#"))
           ;; make-temp-file creates the file,
           ;; but we don't want it to exist until we do an auto-save.
           (condition-case ()
               (delete-file file-name)
             (file-error nil))
           file-name)))

   #+END_SRC

 - Unfills a full paragraph.
   #+BEGIN_SRC emacs-lisp
     ;; From http://endlessparentheses.com/fill-and-unfill-paragraphs-with-a-single-key.html
     (defun dt/fill-or-unfill ()
       "Like `fill-paragraph', but unfill if used twice."
       (interactive)
       (let ((fill-column
              (if (eq last-command 'dt/fill-or-unfill)
                  (progn (setq this-command nil)
                         (point-max))
                fill-column)))
         (call-interactively #'fill-paragraph)))

   #+END_SRC
