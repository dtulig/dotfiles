* Starter Kit Specifics
 - Load starter kit modules.
   #+BEGIN_SRC emacs-lisp
     (starter-kit-load "eshell")
     (starter-kit-load "lisp")
     (starter-kit-load "misc")
     (starter-kit-load "misc-recommended")
     (starter-kit-load "org")
     (starter-kit-load "yasnippet")
   #+END_SRC

* ELPA Packages

#+BEGIN_SRC emacs-lisp
  (starter-kit-install-if-needed
   'clojure-mode
   'clojurescript-mode
   'cider
   'auto-complete
   'ac-nrepl
   'go-mode
   'exec-path-from-shell
   'haskell-mode
   'ghc
   'flycheck
   'flycheck-haskell)
#+END_SRC

* Misc Settings
 - Remove scrollbars.
   #+BEGIN_SRC emacs-lisp
     (scroll-bar-mode -1)
   #+END_SRC

 - Load solarized theme.
   #+BEGIN_SRC emacs-lisp
     (add-to-list 'custom-theme-load-path "~/.emacs.d/non-elpa/emacs-color-theme-solarized")
     (load-theme 'solarized t)
   #+END_SRC

 - Show better el stack traces.
   #+BEGIN_SRC emacs-lisp
     (setq stack-trace-on-error t)
   #+END_SRC

 - On linux machines, the font size is small. This bumps it up to
   something more readable while leaving it as the default for mac.
   #+BEGIN_SRC emacs-lisp
     (when (not (memq window-system '(mac ns)))
       (set-face-attribute 'default nil :height 110))
   #+END_SRC

 - When on a mac, make sure to load exec-path-from-shell to get the
   PATH loaded into emacs.
   #+BEGIN_SRC emacs-lisp
     (when (memq window-system '(mac ns))
         (exec-path-from-shell-initialize))
   #+END_SRC

 - Put the non-elpa directory on the load path.
   #+BEGIN_SRC emacs-lisp
     (add-to-list 'load-path "~/.emacs.d/non-elpa")
   #+END_SRC

 - Set the last seen setup instructions for magit.
   #+BEGIN_SRC emacs-lisp
     (setq magit-last-seen-setup-instructions "1.4.0")
   #+END_SRC

 - Remove extra whitespace on save.
   #+BEGIN_SRC emacs-lisp
     (add-hook 'before-save-hook 'delete-trailing-whitespace)
   #+END_SRC

* Email and mu4e
#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "/var/run/current-system/sw/share/emacs/site-lisp/mu4e")

  (require 'mu4e)
  (require 'org-mu4e)

  (setq mu4e-maildir "~/.mail/gmail")
  (setq mu4e-drafts-folder "/[Gmail].Drafts")
  (setq mu4e-sent-folder   "/[Gmail].Sent Mail")
  (setq mu4e-trash-folder  "/[Gmail].Trash")

  (require 'mu4e-contrib)
  (setq mu4e-html2text-command 'mu4e-shr2text)
  (setq mu4e-change-filenames-when-moving t)
  (setq mu4e-sent-messages-behavior 'delete)

  (setq mu4e-maildir-shortcuts
      '( ("/INBOX"               . ?i)
         ("/[Gmail].Sent Mail"   . ?s)
         ("/[Gmail].Trash"       . ?t)
         ("/[Gmail].All Mail"    . ?a)))

  (setq mu4e-get-mail-command "mbsync gmail")
    (setq mu4e-bookmarks
          '(
            ("(flag:unread AND NOT (flag:trashed OR maildir:\"/[Gmail].Trash\") AND NOT ((maildir:\"/[Gmail].Spam\") OR (maildir:\"/[Gmail].All Mail\") OR (maildir:\"/[Gmail].Important\")) OR maildir:\"/[Gmail].Inbox\""
             "Daily Review" ?d)
            ("flag:unread AND NOT (flag:trashed OR maildir:\"/[Gmail].Trash\") AND NOT list:* AND NOT maildir:\"/[Gmail].Spam\""
             "Unread messages, no lists" ?U)
            ("flag:unread AND NOT (flag:trashed OR maildir:\"/[Gmail].Trash\") AND NOT maildir:\"/[Gmail].Spam\""
             "All unread messages" ?u)
            ("flag:unread AND list:* AND NOT maildir:\"/[Gmail].Spam\" AND NOT maildir:\"/[Gmail].Trash\""
             "Unread lists" ?l)
            ("date:today..now"                  "Today's messages"     ?t)
            ("date:7d..now"                     "Last 7 days"          ?w)
            ("mime:image/*"                     "Messages with images" ?p)))

  (require 'smtpmail)

  (defun read-lines (filePath)
    "Return a list of lines of a file at filePath."
    (with-temp-buffer
      (insert-file-contents filePath)
      (split-string (buffer-string) "\n" t)))

  (defun get-string-from-file (filePath)
    "Return filePath's file content."
    (with-temp-buffer
      (insert-file-contents filePath)
          (buffer-string)))

  (setq mu4e-compose-signature (get-string-from-file "~/.mu/signature"))

  (setq message-send-mail-function 'smtpmail-send-it
      smtpmail-stream-type 'starttls
      smtpmail-default-smtp-server "smtp.gmail.com"
      smtpmail-smtp-server "smtp.gmail.com"
      smtpmail-smtp-service 587)

  (setq message-kill-buffer-on-exit t)

  (defun org-mu4e-store-link ()
    "Store a link to a mu4e query or message."
    (cond
     ;; storing links to queries
     ((eq major-mode 'mu4e-headers-mode)
      (let* ((query (mu4e-last-query))
             desc link)
        (org-store-link-props :type "mu4e" :query query)
        (setq
         desc (concat "mu4e:query:" query)
         link desc)
        (org-add-link-props :link link :description desc)
        link))
     ;; storing links to messages
     ((eq major-mode 'mu4e-view-mode)
      (let* ((msg  (mu4e-message-at-point))
             (msgid   (or (plist-get msg :message-id) "<none>"))
             (from (car (car (mu4e-message-field msg :from))))
             (to (car (car (mu4e-message-field msg :to))))
             (subject (mu4e-message-field msg :subject))
             link)
        (setq link (concat "mu4e:msgid:" msgid))
        (org-store-link-props :type "mu4e" :link link
                              :message-id msgid)
        (setq link (concat "mu4e:msgid:" msgid))
        (org-store-link-props
         :type "mu4e" :from from :to to :subject subject
         :message-id msgid)

        (org-add-link-props :link link
                            :description (funcall org-mu4e-link-desc-func msg))
        link))))

  (org-add-link-type "mu4e" 'org-mu4e-open)
  (add-hook 'org-store-link-functions 'org-mu4e-store-link)
#+END_SRC

* Mode Customizations
** Nix
#+BEGIN_SRC emacs-lisp
  (require 'nix-mode)
#+END_SRC
** Org
#+BEGIN_SRC emacs-lisp
  (setq org-directory (expand-file-name "~/Dropbox/org"))

  (setq org-log-done 'time)
  (global-set-key "\C-cl" 'org-store-link)
  (setq org-default-notes-file (concat org-directory "/notes.org"))
  (global-set-key "\C-cc" 'org-capture)
  (global-set-key "\C-ca" 'org-agenda)
  (global-set-key "\C-cb" 'org-iswitchb)

  (setq org-refile-use-outline-path 'nil)

  (setq org-todo-keywords
        (quote ((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)")
                (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)" "PHONE" "MEETING"))))

  (setq org-todo-keyword-faces
        (quote (("TODO" :foreground "red" :weight bold)
                ("NEXT" :foreground "blue" :weight bold)
                ("DONE" :foreground "forest green" :weight bold)
                ("WAITING" :foreground "orange" :weight bold)
                ("HOLD" :foreground "magenta" :weight bold)
                ("CANCELLED" :foreground "forest green" :weight bold)
                ("MEETING" :foreground "forest green" :weight bold)
                ("PHONE" :foreground "forest green" :weight bold))))

  (setq org-clock-in-resume t)
  (setq org-drawers (quote ("PROPERTIES" "LOGBOOK")))
  (setq org-clock-into-drawer t)
  (setq org-clock-out-remove-zero-time-clocks t)
  (setq org-clock-out-when-done t)

  (setq org-capture-templates
        '(("t" "Todo" entry (file+datetree
                              (concat org-directory "/inbox.org"))
           "* TODO %^{Description}
  %U
  %?
  " :clock-in t :clock-resume t)
          ("r" "Respond" entry (file+datetree
                                (concat org-directory "/inbox.org"))
                 "* NEXT Respond to %:from on %:subject
  SCHEDULED: %t
  %U
  %a
  " :clock-in t :clock-resume t :immediate-finish t)
          ("n" "Note" entry (file+datetree
                             (concat org-directory "/inbox.org"))
                 "* %? :NOTE:
  %U
  " :clock-in t :clock-resume t)
          ("j" "Journal" entry (file+datetree (concat org-directory "/journal.org"))
                 "* %^{Title}
  %U
  %?
  " :clock-in t :clock-resume t)
          ("l" "Log Time" entry (file+datetree
                                 (concat org-directory "/timelog.org"))
           "** %U - %^{Activity}  :TIME:")
          ("m" "Meeting" entry (file+datetree
                                (concat org-directory "/inbox.org"))
                 "* MEETING with %^{Description} :MEETING:
  %U
  %?" :clock-in t :clock-resume t)))

  (setq org-refile-targets (quote ((nil :maxlevel . 4)
                                   (org-agenda-files :maxlevel . 4))))

  (setq backup-directory-alist
        `((".*" . ,temporary-file-directory)))
  (setq auto-save-file-name-transforms
        `((".*" ,temporary-file-directory t)))

  (setq org-agenda-files (list (expand-file-name "~/Dropbox/org")))

  (setq org-agenda-span 'day)

  (add-hook 'org-agenda-mode-hook
            (lambda ()
              (add-hook 'auto-save-hook 'org-save-all-org-buffers nil t)
              (auto-save-mode)))

  (require 'cl)

  (defun buffer-major-mode-org-mode-p (buffer)
    (string= "org-mode" (with-current-buffer buffer major-mode)))

  ;; When refreshing the org mode window, occasionally a file will have
  ;; shifted underneath the current instance of emacs. This function
  ;; will close all org-mode buffers.
  (defun org-close-all-org-buffers ()
    (interactive)
    (mapcar #'kill-buffer
            (remove-if-not #'buffer-major-mode-org-mode-p (buffer-list))))

  ;; This is a global key to close all org mode buffers.
  ;(global-set-key "\C-c\C-g" 'org-close-all-org-buffers)

  (defun org-agenda-redo-with-close-buffers ()
    (interactive)
    (org-close-all-org-buffers)
    (org-agenda-redo t))

  ;: This remaps "g" to close all org mode buffers and then call agenda
  ;; redo. "r" still calls redo normally.
  (add-hook 'org-agenda-mode-hook
            (lambda ()
              (define-key org-agenda-mode-map "g" #'org-agenda-redo-with-close-buffers)))

  ;; I liked http://doc.norang.ca/org-mode.html#WhatDoIWorkOnNext,
  ;; taking some of that.

  (setq org-agenda-custom-commands
        (quote ((" " "Agenda"
                 ((agenda "" nil)
                  (tags-todo "-CANCELLED/!"
                             ((org-agenda-overriding-header "Stuck Projects")
                              (org-agenda-skip-function 'bh/skip-non-stuck-projects)
                              (org-agenda-sorting-strategy
                               '(category-keep))))
                  (tags-todo "-HOLD-CANCELLED/!"
                             ((org-agenda-overriding-header "Projects")
                              (org-agenda-skip-function 'bh/skip-non-projects)
                              (org-tags-match-list-sublevels 'indented)
                              (org-agenda-sorting-strategy
                               '(category-keep))))
                  (tags-todo "-CANCELLED/!NEXT"
                             ((org-agenda-overriding-header (concat "Project Next Tasks"
                                                                    (if bh/hide-scheduled-and-waiting-next-tasks
                                                                        ""
                                                                      " (including WAITING and SCHEDULED tasks)")))
                              (org-agenda-skip-function 'bh/skip-projects-and-habits-and-single-tasks)
                              (org-tags-match-list-sublevels t)
                              (org-agenda-todo-ignore-scheduled bh/hide-scheduled-and-waiting-next-tasks)
                              (org-agenda-todo-ignore-deadlines bh/hide-scheduled-and-waiting-next-tasks)
                              (org-agenda-todo-ignore-with-date bh/hide-scheduled-and-waiting-next-tasks)
                              (org-agenda-sorting-strategy
                               '(todo-state-down effort-up category-keep))))
                  (tags-todo "-REFILE-CANCELLED-WAITING-HOLD/!"
                             ((org-agenda-overriding-header (concat "Project Subtasks"
                                                                    (if bh/hide-scheduled-and-waiting-next-tasks
                                                                        ""
                                                                      " (including WAITING and SCHEDULED tasks)")))
                              (org-agenda-skip-function 'bh/skip-non-project-tasks)
                              (org-agenda-todo-ignore-scheduled bh/hide-scheduled-and-waiting-next-tasks)
                              (org-agenda-todo-ignore-deadlines bh/hide-scheduled-and-waiting-next-tasks)
                              (org-agenda-todo-ignore-with-date bh/hide-scheduled-and-waiting-next-tasks)
                              (org-agenda-sorting-strategy
                               '(category-keep)))))
                  nil))))

#+END_SRC

#+RESULTS:
|   | Agenda | ((agenda  nil) (tags-todo -CANCELLED/! ((org-agenda-overriding-header Stuck Projects) (org-agenda-skip-function (quote bh/skip-non-stuck-projects)) (org-agenda-sorting-strategy (quote (category-keep))))) (tags-todo -HOLD-CANCELLED/! ((org-agenda-overriding-header Projects) (org-agenda-skip-function (quote bh/skip-non-projects)) (org-tags-match-list-sublevels (quote indented)) (org-agenda-sorting-strategy (quote (category-keep))))) (tags-todo -CANCELLED/!NEXT ((org-agenda-overriding-header (concat Project Next Tasks (if bh/hide-scheduled-and-waiting-next-tasks   (including WAITING and SCHEDULED tasks)))) (org-agenda-skip-function (quote bh/skip-projects-and-habits-and-single-tasks)) (org-tags-match-list-sublevels t) (org-agenda-todo-ignore-scheduled bh/hide-scheduled-and-waiting-next-tasks) (org-agenda-todo-ignore-deadlines bh/hide-scheduled-and-waiting-next-tasks) (org-agenda-todo-ignore-with-date bh/hide-scheduled-and-waiting-next-tasks) (org-agenda-sorting-strategy (quote (todo-state-down effort-up category-keep))))) (tags-todo -REFILE-CANCELLED-WAITING-HOLD/! ((org-agenda-overriding-header (concat Project Subtasks (if bh/hide-scheduled-and-waiting-next-tasks   (including WAITING and SCHEDULED tasks)))) (org-agenda-skip-function (quote bh/skip-non-project-tasks)) (org-agenda-todo-ignore-scheduled bh/hide-scheduled-and-waiting-next-tasks) (org-agenda-todo-ignore-deadlines bh/hide-scheduled-and-waiting-next-tasks) (org-agenda-todo-ignore-with-date bh/hide-scheduled-and-waiting-next-tasks) (org-agenda-sorting-strategy (quote (category-keep)))))) | nil |

** Clojure
 - Initialization.
   #+BEGIN_SRC emacs-lisp
     (add-hook 'cider-mode-hook 'cider-turn-on-eldoc-mode)
     (setq nrepl-hide-special-buffers t)
     (add-hook 'cider-repl-mode-hook 'paredit-mode)
     (add-hook 'cider-repl-mode-hook 'auto-complete-mode)
   #+END_SRC
** GLSL
 - Initialization
   #+BEGIN_SRC emacs-lisp
     (autoload 'glsl-mode "glsl-mode" nil t)
     (add-to-list 'auto-mode-alist '("\\.glsl\\'" . glsl-mode))
     (add-to-list 'auto-mode-alist '("\\.vert\\'" . glsl-mode))
     (add-to-list 'auto-mode-alist '("\\.frag\\'" . glsl-mode))
     (add-to-list 'auto-mode-alist '("\\.geom\\'" . glsl-mode))
   #+END_SRC

* General Defuns
 - I disliked the order that it used for where to put auto save
   buffers that do not map to a file. The new change will first try to
   write to /tmp before going to the default directory, typically
   where emacs was loaded for buffers without files.
   #+BEGIN_SRC emacs-lisp
     (defun make-auto-save-file-name ()
       "Return file name to use for auto-saves of current buffer.
     Does not consider `auto-save-visited-file-name' as that variable is checked
     before calling this function.  You can redefine this for customization.
     See also `auto-save-file-name-p'."
       (if buffer-file-name
           (let ((handler (find-file-name-handler buffer-file-name
                                                  'make-auto-save-file-name)))
             (if handler
                 (funcall handler 'make-auto-save-file-name)
               (let ((list auto-save-file-name-transforms)
                     (filename buffer-file-name)
                     result uniq)
                 ;; Apply user-specified translations
                 ;; to the file name.
                 (while (and list (not result))
                   (if (string-match (car (car list)) filename)
                       (setq result (replace-match (cadr (car list)) t nil
                                                   filename)
                             uniq (car (cddr (car list)))))
                   (setq list (cdr list)))
                 (if result
                     (if uniq
                         (setq filename (concat
                                         (file-name-directory result)
                                         (subst-char-in-string
                                          ?/ ?!
                                          (replace-regexp-in-string "!" "!!"
                                                                    filename))))
                       (setq filename result)))
                 (setq result
                       (if (and (eq system-type 'ms-dos)
                                (not (msdos-long-file-names)))
                           ;; We truncate the file name to DOS 8+3 limits
                           ;; before doing anything else, because the regexp
                           ;; passed to string-match below cannot handle
                           ;; extensions longer than 3 characters, multiple
                           ;; dots, and other atrocities.
                           (let ((fn (dos-8+3-filename
                                      (file-name-nondirectory buffer-file-name))))
                             (string-match
                              "\\`\\([^.]+\\)\\(\\.\\(..?\\)?.?\\|\\)\\'"
                              fn)
                             (concat (file-name-directory buffer-file-name)
                                     "#" (match-string 1 fn)
                                     "." (match-string 3 fn) "#"))
                         (concat (file-name-directory filename)
                                 "#"
                                 (file-name-nondirectory filename)
                                 "#")))
                 ;; Make sure auto-save file names don't contain characters
                 ;; invalid for the underlying filesystem.
                 (if (and (memq system-type '(ms-dos windows-nt cygwin))
                          ;; Don't modify remote (ange-ftp) filenames
                          (not (string-match "^/\\w+@[-A-Za-z0-9._]+:" result)))
                     (convert-standard-filename result)
                   result))))

         ;; Deal with buffers that don't have any associated files.  (Mail
         ;; mode tends to create a good number of these.)

         (let ((buffer-name (buffer-name))
               (limit 0)
               file-name)
           ;; Restrict the characters used in the file name to those which
           ;; are known to be safe on all filesystems, url-encoding the
           ;; rest.
           ;; We do this on all platforms, because even if we are not
           ;; running on DOS/Windows, the current directory may be on a
           ;; mounted VFAT filesystem, such as a USB memory stick.
           (while (string-match "[^A-Za-z0-9-_.~#+]" buffer-name limit)
             (let* ((character (aref buffer-name (match-beginning 0)))
                    (replacement
                     ;; For multibyte characters, this will produce more than
                     ;; 2 hex digits, so is not true URL encoding.
                     (format "%%%02X" character)))
               (setq buffer-name (replace-match replacement t t buffer-name))
               (setq limit (1+ (match-end 0)))))
           ;; Generate the file name.
           (setq file-name
                 (make-temp-file
                  (let ((fname
                         (expand-file-name
                          (format "#%s#" buffer-name)
                          ;; Try a few alternative directories, to get one we can
                          ;; write it.
                          (cond
                           ((file-writable-p "/tmp/") "/tmp/")
                           ((file-writable-p default-directory) default-directory)
                           ((file-writable-p "/var/tmp/") "/var/tmp/")
                           ("~/")))))
                    (if (and (memq system-type '(ms-dos windows-nt cygwin))
                             ;; Don't modify remote (ange-ftp) filenames
                             (not (string-match "^/\\w+@[-A-Za-z0-9._]+:" fname)))
                        ;; The call to convert-standard-filename is in case
                        ;; buffer-name includes characters not allowed by the
                        ;; DOS/Windows filesystems.  make-temp-file writes to the
                        ;; file it creates, so we must fix the file name _before_
                        ;; make-temp-file is called.
                        (convert-standard-filename fname)
                      fname))
                  nil "#"))
           ;; make-temp-file creates the file,
           ;; but we don't want it to exist until we do an auto-save.
           (condition-case ()
               (delete-file file-name)
             (file-error nil))
           file-name)))

   #+END_SRC

 - Unfills a full paragraph.
   #+BEGIN_SRC emacs-lisp
     (defun unfill-paragraph (&optional region)
          "Takes a multi-line paragraph and makes it into a single line of text."
          (interactive (progn (barf-if-buffer-read-only) '(t)))
          (let ((fill-column (point-max))
                (emacs-lisp-docstring-fill-column t))
            (fill-paragraph nil region)))
   #+END_SRC

* General Bindings
#+BEGIN_SRC emacs-lisp
  (define-key global-map "\M-Q" 'unfill-paragraph)
#+END_SRC
* Migration from old emacs configuration

#+BEGIN_SRC emacs-lisp
  (custom-set-variables
   '(haskell-process-suggest-remove-import-lines t)
   '(haskell-process-auto-import-loaded-modules t)
   '(haskell-process-log t)
   ;; custom-set-variables was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   '(ecb-layout-name "left7")
   '(ecb-layout-window-sizes (quote (("left7" (ecb-directories-buffer-name 0.15126050420168066 . 0.576271186440678) (ecb-history-buffer-name 0.15126050420168066 . 0.15254237288135594) (ecb-methods-buffer-name 0.15126050420168066 . 0.2542372881355932)))))
   '(ecb-options-version "2.40")
   '(ecb-source-path (quote (("~/.emacs.d" "emacs"))))
   '(haskell-process-auto-import-loaded-modules t)
   '(haskell-process-log t)
   '(haskell-process-suggest-remove-import-lines t)
   '(safe-local-variable-values (quote ((auto-save-timeout . 10) (auto-save-interval . 20) (auto-save-visited-file-name . t) (whitespace-line-column . 80) (lexical-binding . t)))))
  (custom-set-faces
   ;; custom-set-faces was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   )
#+END_SRC
