* Org Mode
** General Settings
#+begin_src emacs-lisp
  (setq org-directory (expand-file-name "~/Sync/org/"))
  (setq org-log-done 'time)
  (setq org-default-notes-file (concat org-directory "/notes.org"))
  (setq org-refile-use-outline-path 'nil)
  (setq org-agenda-clockreport-parameter-plist
	(quote (:link t :fileskip0 t)))
  (setq org-clock-in-resume t)
  (setq org-drawers (quote ("PROPERTIES" "LOGBOOK")))
  (setq org-clock-into-drawer t)
  (setq org-clock-out-remove-zero-time-clocks t)
  (setq org-clock-out-when-done t)
  (setq org-refile-targets (quote ((nil :maxlevel . 3)
				   (org-agenda-files :maxlevel . 3))))
#+end_src
** Todo Keywords and States Configuration
#+begin_src emacs-lisp
  (setq org-todo-keywords
	(quote ((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)")
		(sequence "WAITING(w@/!)" "DELEGATED(e@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)" "PHONE" "MEETING"))))

  (setq org-todo-keyword-faces
	(quote (("TODO" :foreground "red" :weight bold)
		("NEXT" :foreground "blue" :weight bold)
		("DONE" :foreground "forest green" :weight bold)
		("WAITING" :foreground "orange" :weight bold)
		("DELEGATED" :foreground "orange" :weight bold)
		("HOLD" :foreground "magenta" :weight bold)
		("CANCELLED" :foreground "forest green" :weight bold)
		("MEETING" :foreground "forest green" :weight bold)
		("PHONE" :foreground "forest green" :weight bold))))

  (setq org-todo-state-tags-triggers
	(quote (("CANCELLED" ("CANCELLED" . t))
		("WAITING" ("WAITING" . t))
		("DELEGATED" ("DELEGATED" . t))
		("HOLD" ("WAITING") ("DELEGATED") ("HOLD" . t))
		(done ("WAITING") ("DELEGATED") ("HOLD"))
		("TODO" ("WAITING") ("DELEGATED") ("CANCELLED") ("HOLD"))
		("NEXT" ("WAITING") ("DELEGATED") ("CANCELLED") ("HOLD"))
		("DONE" ("WAITING") ("DELEGATED") ("CANCELLED") ("HOLD")))))

#+end_src
** Project customizations
#+begin_src emacs-lisp
  (defvar org-projects-dir (expand-file-name  (concat org-directory "projects/")))

  (defun gf/create-org-path (path)
    "Create a name suitable for an org file from the last part of a file
    path."
    (let ((last (car (last (split-string (if (equal (substring path -1) "/")
					     (substring path 0 -1) path) "/")))))
      (concat org-projects-dir "/"
	      (downcase
	       (replace-regexp-in-string
		"\\." "-" (if (equal (substring last 0 1) ".")
			      (substring last 1) last)))
	      ".org")))

  (defun gf/project-org-file ()
    "Get the path of the org file for the current project."
    (gf/create-org-path (projectile-project-root)))

  (defun gf/switch-to-project-org-file ()
    "Switch to the org file for the current project."
    (interactive)
    (find-file (gf/project-org-file)))
#+end_src

** Reload function
#+begin_src emacs-lisp
  (defun dt/org-reload ()
    (interactive)
    (setq org-agenda-files (append (file-expand-wildcards (concat org-directory "dates/*.org"))
				   (file-expand-wildcards (concat org-directory "*.org"))
				   (file-expand-wildcards (concat org-directory "projects/*.org"))
				   (file-expand-wildcards (concat org-directory "indeed/dates/*.org"))
				   (file-expand-wildcards (concat org-directory "indeed/*.org"))))
    (setq org-default-personal-notes-file
	  (concat org-directory "dates/"
		  (downcase (format-time-string "%Y-%B-p.org"))))
    (setq org-default-work-notes-file
	  (concat org-directory "indeed/dates/"
		  (downcase (format-time-string "%Y-%B-w.org")))))
#+end_src
** Capture templates
#+begin_src emacs-lisp
  (setq org-capture-templates
	'(("t" "Todo (Work)" entry (file+headline
				    org-default-work-notes-file "Tasks")
	   "* TODO %^{Description}
  %U
  %?
  " :clock-in t :clock-resume t)

	  ("r" "Respond (Work)" entry (file+headline
				       org-default-work-notes-file "Tasks")

	   "* NEXT Respond to %:from on %:subject
  SCHEDULED: %t
  %U
  %a
  " :clock-in t :clock-resume t :immediate-finish t)
	  ("p" "Todo (Personal)" entry (file+headline
					org-default-personal-notes-file "Tasks")
	   "* TODO %^{Description}
  %U
  %?
  " :clock-in t :clock-resume t)
	  ("e" "Respond (Personal)" entry (file+headline
					   org-default-personal-notes-file "Tasks")
	   "* NEXT Respond to %:from on %:subject
  SCHEDULED: %t
  %U
  %a
  " :clock-in t :clock-resume t :immediate-finish t)
	  ("n" "Note" entry (file+headline
			     org-default-personal-notes-file "Notes")
	   "* %? :NOTE:
  %U
  " :clock-in t :clock-resume t)
	  ("P" "Todo (Project)" entry (file+headline
				       gf/project-org-file "Tasks")
	   "* TODO %^{Description}
  %U
  %?
  " :clock-in t :clock-resume t)
	  ("N" "Project Note" entry (file+headline
				     gf/project-org-file "Notes")
	   "* %?
  %U
  ")
	  ;; ("j" "Journal" entry (file+datetree (concat org-directory "/journal.org"))
	  ;;                "* %^{Title}
	  ;; %U
	  ;; %?
	  ;; " :clock-in t :clock-resume t)
	  ;;         ("l" "Log Time" entry (file+datetree
	  ;;                                (concat org-directory "/timelog.org"))
	  ;;          "** %U - %^{Activity}  :TIME:")
	  ("m" "Meeting" entry (file+headline
				org-default-work-notes-file "Meetings")
	   "* MEETING with %^{Description} :MEETING:
  %U
  %?" :clock-in t :clock-resume t)))
#+end_src
** Agenda
#+begin_src emacs-lisp
  (setq org-agenda-span 'day)

  


  (defun buffer-major-mode-org-mode-p (buffer)
    (string= "org-mode" (with-current-buffer buffer major-mode)))

  ;; When refreshing the org mode window, occasionally a file will have
  ;; shifted underneath the current instance of emacs. This function
  ;; will close all org-mode buffers.
  (defun org-close-all-org-buffers ()
    (interactive)
    (mapcar #'kill-buffer
	    (remove-if-not #'buffer-major-mode-org-mode-p (buffer-list))))

  ;; This is a global key to close all org mode buffers.
					  ;(global-set-key "\C-c\C-g" 'org-close-all-org-buffers)

  (defun org-agenda-redo-with-close-buffers ()
    (interactive)
    (org-close-all-org-buffers)
    (org-agenda-redo t))

  ;; I liked http://doc.norang.ca/org-mode.html#WhatDoIWorkOnNext,
  ;; taking some of that.
  (setq org-agenda-custom-commands
	(quote (("A" "Agenda"
		 ((agenda "" nil)
		  (tags-todo "-SOMEDAY-CANCELLED/!"
			     ((org-agenda-overriding-header "Stuck Projects")
			      (org-agenda-skip-function 'bh/skip-non-stuck-projects)
			      (org-agenda-sorting-strategy
			       '(category-keep))))
		  (tags-todo "-SOMEDAY-HOLD-CANCELLED/!"
			     ((org-agenda-overriding-header "Projects")
			      (org-agenda-skip-function 'bh/skip-non-projects)
			      (org-tags-match-list-sublevels 'indented)
			      (org-agenda-sorting-strategy
			       '(category-keep))))
		  (tags-todo "-SOMEDAY-HOLD-CANCELLED/!NEXT"
			     ((org-agenda-overriding-header (concat "Project Next Tasks"
								    (if bh/hide-scheduled-and-waiting-next-tasks
									""
								      " (including WAITING and SCHEDULED tasks)")))
			      (org-agenda-skip-function 'bh/skip-projects-and-habits-and-single-tasks)
			      (org-tags-match-list-sublevels t)
			      (org-agenda-todo-ignore-scheduled bh/hide-scheduled-and-waiting-next-tasks)
			      (org-agenda-todo-ignore-deadlines bh/hide-scheduled-and-waiting-next-tasks)
			      (org-agenda-todo-ignore-with-date bh/hide-scheduled-and-waiting-next-tasks)
			      (org-agenda-sorting-strategy
			       '(todo-state-down effort-up category-keep))))
		  (tags-todo "-SOMEDAY-REFILE-CANCELLED-WAITING-HOLD/!"
			     ((org-agenda-overriding-header (concat "Project Subtasks"
								    (if bh/hide-scheduled-and-waiting-next-tasks
									""
								      " (including WAITING and SCHEDULED tasks)")))
			      (org-agenda-skip-function 'bh/skip-non-project-tasks)
			      (org-agenda-todo-ignore-scheduled bh/hide-scheduled-and-waiting-next-tasks)
			      (org-agenda-todo-ignore-deadlines bh/hide-scheduled-and-waiting-next-tasks)
			      (org-agenda-todo-ignore-with-date bh/hide-scheduled-and-waiting-next-tasks)
			      (org-agenda-sorting-strategy
			       '(category-keep)))))
		 nil))))

#+end_src
** Norang Customizations
#+begin_src emacs-lisp
  (defun bh/is-project-p ()
    "Any task with a todo keyword subtask"
    (save-restriction
      (widen)
      (let ((has-subtask)
	    (subtree-end (save-excursion (org-end-of-subtree t)))
	    (is-a-task (member (nth 2 (org-heading-components)) org-todo-keywords-1)))
	(save-excursion
	  (forward-line 1)
	  (while (and (not has-subtask)
		      (< (point) subtree-end)
		      (re-search-forward "^\*+ " subtree-end t))
	    (when (member (org-get-todo-state) org-todo-keywords-1)
	      (setq has-subtask t))))
	(and is-a-task has-subtask))))

  (defun bh/find-project-task ()
    "Move point to the parent (project) task if any"
    (save-restriction
      (widen)
      (let ((parent-task (save-excursion (org-back-to-heading 'invisible-ok) (point))))
	(while (org-up-heading-safe)
	  (when (member (nth 2 (org-heading-components)) org-todo-keywords-1)
	    (setq parent-task (point))))
	(goto-char parent-task)
	parent-task)))

  (defun bh/is-project-subtree-p ()
    "Any task with a todo keyword that is in a project subtree.
  Callers of this function already widen the buffer view."
    (let ((task (save-excursion (org-back-to-heading 'invisible-ok)
				(point))))
      (save-excursion
	(bh/find-project-task)
	(if (equal (point) task)
	    nil
	  t))))

  (defun bh/is-task-p ()
    "Any task with a todo keyword and no subtask"
    (save-restriction
      (widen)
      (let ((has-subtask)
	    (subtree-end (save-excursion (org-end-of-subtree t)))
	    (is-a-task (member (nth 2 (org-heading-components)) org-todo-keywords-1)))
	(save-excursion
	  (forward-line 1)
	  (while (and (not has-subtask)
		      (< (point) subtree-end)
		      (re-search-forward "^\*+ " subtree-end t))
	    (when (member (org-get-todo-state) org-todo-keywords-1)
	      (setq has-subtask t))))
	(and is-a-task (not has-subtask)))))

  (defun bh/is-subproject-p ()
    "Any task which is a subtask of another project"
    (let ((is-subproject)
	  (is-a-task (member (nth 2 (org-heading-components)) org-todo-keywords-1)))
      (save-excursion
	(while (and (not is-subproject) (org-up-heading-safe))
	  (when (member (nth 2 (org-heading-components)) org-todo-keywords-1)
	    (setq is-subproject t))))
      (and is-a-task is-subproject)))

  (defun bh/list-sublevels-for-projects-indented ()
    "Set org-tags-match-list-sublevels so when restricted to a subtree we list all subtasks.
    This is normally used by skipping functions where this variable is already local to the agenda."
    (if (marker-buffer org-agenda-restrict-begin)
	(setq org-tags-match-list-sublevels 'indented)
      (setq org-tags-match-list-sublevels nil))
    nil)

  (defun bh/list-sublevels-for-projects ()
    "Set org-tags-match-list-sublevels so when restricted to a subtree we list all subtasks.
    This is normally used by skipping functions where this variable is already local to the agenda."
    (if (marker-buffer org-agenda-restrict-begin)
	(setq org-tags-match-list-sublevels t)
      (setq org-tags-match-list-sublevels nil))
    nil)

  (defvar bh/hide-scheduled-and-waiting-next-tasks t)

  (defun bh/toggle-next-task-display ()
    (interactive)
    (setq bh/hide-scheduled-and-waiting-next-tasks (not bh/hide-scheduled-and-waiting-next-tasks))
    (when  (equal major-mode 'org-agenda-mode)
      (org-agenda-redo))
    (message "%s WAITING and SCHEDULED NEXT Tasks" (if bh/hide-scheduled-and-waiting-next-tasks "Hide" "Show")))

  (defun bh/skip-stuck-projects ()
    "Skip trees that are not stuck projects"
    (save-restriction
      (widen)
      (let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
	(if (bh/is-project-p)
	    (let* ((subtree-end (save-excursion (org-end-of-subtree t)))
		   (has-next ))
	      (save-excursion
		(forward-line 1)
		(while (and (not has-next) (< (point) subtree-end) (re-search-forward "^\\*+ NEXT " subtree-end t))
		  (unless (member "WAITING" (org-get-tags-at))
		    (setq has-next t))))
	      (if has-next
		  nil
		next-headline)) ; a stuck project, has subtasks but no next task
	  nil))))

  (defun bh/skip-non-stuck-projects ()
    "Skip trees that are not stuck projects"
    ;; (bh/list-sublevels-for-projects-indented)
    (save-restriction
      (widen)
      (let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
	(if (bh/is-project-p)
	    (let* ((subtree-end (save-excursion (org-end-of-subtree t)))
		   (has-next ))
	      (save-excursion
		(forward-line 1)
		(while (and (not has-next) (< (point) subtree-end) (re-search-forward "^\\*+ NEXT " subtree-end t))
		  (unless (member "WAITING" (org-get-tags-at))
		    (setq has-next t))))
	      (if has-next
		  next-headline
		nil)) ; a stuck project, has subtasks but no next task
	  next-headline))))

  (defun bh/skip-non-projects ()
    "Skip trees that are not projects"
    ;; (bh/list-sublevels-for-projects-indented)
    (if (save-excursion (bh/skip-non-stuck-projects))
	(save-restriction
	  (widen)
	  (let ((subtree-end (save-excursion (org-end-of-subtree t))))
	    (cond
	     ((bh/is-project-p)
	      nil)
	     ((and (bh/is-project-subtree-p) (not (bh/is-task-p)))
	      nil)
	     (t
	      subtree-end))))
      (save-excursion (org-end-of-subtree t))))

  (defun bh/skip-project-trees-and-habits ()
    "Skip trees that are projects"
    (save-restriction
      (widen)
      (let ((subtree-end (save-excursion (org-end-of-subtree t))))
	(cond
	 ((bh/is-project-p)
	  subtree-end)
	 ;; ((org-is-habit-p)
	 ;;  subtree-end)
	 (t
	  nil)))))

  (defun bh/skip-projects-and-habits-and-single-tasks ()
    "Skip trees that are projects, tasks that are habits, single non-project tasks"
    (save-restriction
      (widen)
      (let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
	(cond
	 ;; ((org-is-habit-p)
	 ;;  next-headline)
	 ((and bh/hide-scheduled-and-waiting-next-tasks
	       (member "WAITING" (org-get-tags-at)))
	  next-headline)
	 ((bh/is-project-p)
	  next-headline)
	 ((and (bh/is-task-p) (not (bh/is-project-subtree-p)))
	  next-headline)
	 (t
	  nil)))))

  (defun bh/skip-project-tasks-maybe ()
    "Show tasks related to the current restriction.
  When restricted to a project, skip project and sub project tasks, habits, NEXT tasks, and loose tasks.
  When not restricted, skip project and sub-project tasks, habits, and project related tasks."
    (save-restriction
      (widen)
      (let* ((subtree-end (save-excursion (org-end-of-subtree t)))
	     (next-headline (save-excursion (or (outline-next-heading) (point-max))))
	     (limit-to-project (marker-buffer org-agenda-restrict-begin)))
	(cond
	 ((bh/is-project-p)
	  next-headline)
	 ((org-is-habit-p)
	  subtree-end)
	 ((and (not limit-to-project)
	       (bh/is-project-subtree-p))
	  subtree-end)
	 ((and limit-to-project
	       (bh/is-project-subtree-p)
	       (member (org-get-todo-state) (list "NEXT")))
	  subtree-end)
	 (t
	  nil)))))

  (defun bh/skip-project-tasks ()
    "Show non-project tasks.
  Skip project and sub-project tasks, habits, and project related tasks."
    (save-restriction
      (widen)
      (let* ((subtree-end (save-excursion (org-end-of-subtree t))))
	(cond
	 ((bh/is-project-p)
	  subtree-end)
	 ;; ((org-is-habit-p)
	 ;;  subtree-end)
	 ((bh/is-project-subtree-p)
	  subtree-end)
	 (t
	  nil)))))

  (defun bh/skip-non-project-tasks ()
    "Show project tasks.
  Skip project and sub-project tasks, habits, and loose non-project tasks."
    (save-restriction
      (widen)
      (let* ((subtree-end (save-excursion (org-end-of-subtree t)))
	     (next-headline (save-excursion (or (outline-next-heading) (point-max)))))
	(cond
	 ((bh/is-project-p)
	  next-headline)
	 ;; ((org-is-habit-p)
	 ;;  subtree-end)
	 ((and (bh/is-project-subtree-p)
	       (member (org-get-todo-state) (list "NEXT")))
	  subtree-end)
	 ((not (bh/is-project-subtree-p))
	  subtree-end)
	 (t
	  nil)))))

  (defun bh/skip-projects-and-habits ()
    "Skip trees that are projects and tasks that are habits"
    (save-restriction
      (widen)
      (let ((subtree-end (save-excursion (org-end-of-subtree t))))
	(cond
	 ((bh/is-project-p)
	  subtree-end)
	 ;; ((org-is-habit-p)
	 ;;  subtree-end)
	 (t
	  nil)))))

  (defun bh/skip-non-subprojects ()
    "Skip trees that are not projects"
    (let ((next-headline (save-excursion (outline-next-heading))))
      (if (bh/is-subproject-p)
	  nil
	next-headline)))
#+end_src
** Use package declaration
#+begin_src emacs-lisp
  (use-package org
    :ensure org-plus-contrib
    :bind (("C-c C-l" . org-store-link)
	   ("C-c C-c" . org-capture)
	   ("C-c a" . org-agenda))
    :hook ((org-agenda-mode . (lambda ()
			       (add-hook 'auto-save-hook 'org-save-all-org-buffers nil t)
			       (auto-save-mode)))
	   (org-agenda-mode . (lambda ()
				(define-key org-agenda-mode-map "g" #'org-agenda-redo-with-close-buffers))))
    :config
    (require 'org-checklist)
    (dt/org-reload))

  ;; Find ivy equivalent
  ;;(global-set-key "\C-cb" 'org-iswitchb)


  ;;(add-hook 'midnight-hook 'dt/org-reload)
#+END_SRC

